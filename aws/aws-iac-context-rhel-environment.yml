##
# Example:
#  $ ansible-playbook aws-iac-context-rhel-environment.yml --ask-vault-pass
#  $ ansible-playbook aws-iac-context-rhel-environment.yml -t ansibletower
#  $ ansible-playbook aws-iac-context-rhel-environment.yml -t ansibletowerkeys
#  $ ansible-playbook aws-iac-context-rhel-environment.yml -t generalsubs
#  $ ansible-playbook aws-iac-context-rhel-environment.yml -t classroom
#  $ ansible-playbook aws-iac-context-rhel-environment.yml -t users --ask-vault-pass
##

- hosts: localhost
  connection: local
  gather_facts: False

  tags:
    - ansibletower
    - ansibletowerkeys
    - generalsubs
    - classroom
    - users

  vars:
    environment: "{{ ENV | default('preproduction')}}"
    version: "{{ VER | default('latest') }}"
    inventory_dict: {}

  vars_files:
    - "./vars/aws-{{ environment }}-{{ version }}.yml"

  tasks:
    - name: Set ssh_private_cert_file and ssh_private_key_file facts
      set_fact:
        ssh_private_cert_file: ../../ansiblepoc.pem
        ssh_private_key_file: ../../tower_cluster_id_rsa
    - name: Extract EC2 instance information
      include_role:
        name: iac_aws_instance
      vars:
        action: add-public-ip-inventory
        instance: "{{ item.name }}"
        project: "{{ project_id }}"
        group: "ansiblenodes"
      loop: "{{ instances }}"


- hosts: ansiblenodes
  user: ec2-user
  become: true

  tags:
    - generalsubs

  vars:
    ansible_ssh_private_key_file: "{{ hostvars.localhost.ssh_private_cert_file }}"
    ansible_python_interpreter: /bin/python3

  vars_prompt:
    - name: "rh_cdn_user"
      prompt: "Enter REDHAT CDN user"
    - name: "rh_cdn_pass"
      prompt: "Enter REDHAT CDN pasword"

  tasks:

    - name: Register Red Hat instance with auto-subscribe
      shell: subscription-manager config --rhsm.manage_repos=1 && subscription-manager register --username "{{ rh_cdn_user }}" --password "{{ rh_cdn_pass }}" --force  --auto-attach
      when:
        - ansible_facts.os_family == "RedHat"
      ignore_errors: true


- hosts: student*
  user: ec2-user
  become: true

  vars_files:
    - "./vars/vault-vars.yml"

  tags:
    - users

  vars:
    ansible_ssh_private_key_file: "{{ hostvars.localhost.ssh_private_cert_file }}"
    ansible_python_interpreter: /bin/python3


  tasks:

    - debug:
        var: inventory_hostname

    - name: Generate complex password
      set_fact:
        new_user_strong_pass: "{{ new_user_pass_prefix }}{{ inventory_hostname }}"

    - name: Generate password hash sha512
      set_fact:
        new_hash_pass: "{{ new_user_strong_pass | password_hash('sha512', new_user_secret ) }}"

    - name: Create user
      user:
        name: "{{ inventory_hostname }}"
        password: "{{ new_hash_pass }}"
        group: wheel

    - name: Create user on classroom
      user:
        name: "{{ inventory_hostname }}"
        password: "{{ new_hash_pass }}"
        group: wheel
      delegate_to: classroom01

    - name: Install packages
      # shell: yum install -y git mariadb python3-PyMySQL cockpit
      package:
        name:
          - git
          - mariadb
          - python3-PyMySQL
          - cockpit
        state: present

    - name: Enable Cockpit socket
      shell: systemctl enable --now cockpit.socket

    - name: Change SSH configuration pass auth
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication '
        line: 'PasswordAuthentication yes'
      notify: Restart SSHD

  handlers:

    - name: Restart SSHD
      service:
        name: sshd
        state: restarted
        enabled: yes

- hosts: classroom*
  user: ec2-user
  become: true

  tags:
    - classroom

  vars:
    ansible_ssh_private_key_file: "{{ hostvars.localhost.ssh_private_cert_file }}"
    ansible_python_interpreter: /bin/python3

  tasks:
    - name: Install package http
      # shell: yum install -y httpd python3-PyMySQL mariadb
      package:
        name:
          - httpd
          - python3-PyMySQL
          - mariadb
        state: present

    - name: Enable and Up httpd
      service:
        name: httpd
        state: started
        enabled: yes

    - name: Enable ssh password authentication
      lineinfile:
        state: present
        dest: /etc/ssh/sshd_config
        regexp: "^PasswordAuthentication no$"
        line: "PasswordAuthentication yes"
      notify: Restart SSHD

  handlers:
    - name: Restart SSHD
      service:
        name: sshd
        state: restarted
        enabled: yes

- hosts: ansibletower01
  user: ec2-user
  become: true

  tags:
    - ansibletower

  vars:
    ansible_ssh_private_key_file: "{{ hostvars.localhost.ssh_private_cert_file }}"
    ansible_python_interpreter: /bin/python3

  tasks:
    - shell: subscription-manager repos --enable ansible-2.9-for-rhel-8-x86_64-rpms

    - name: Install packages
      # shell: yum install -y ansible wget
      package:
        name:
          - ansible
          - wget
        state: present

- hosts: ansibletower*
  user: ec2-user
  become: true

  tags:
    - ansibletowerkeys

  vars:
    ansible_ssh_private_key_file: "{{ hostvars.localhost.ssh_private_key_file }}"
    ansible_python_interpreter: /bin/python3


  tasks:
    - shell: subscription-manager repos --enable ansible-2.9-for-rhel-8-x86_64-rpms

    - name: Install packages
      # shell: yum install -y ansible rhel-system-roles
      package:
        name: rhel-system-roles
        state: present

    - name: Copy SSH keys (Pub)
      copy:
        src: "{{ hostvars.localhost.ssh_private_key_file }}.pub"
        dest: /root/.ssh/id_rsa.pub
        owner: root
        group: root
        mode: '0644'

    - name: Copy SSH keys (Priv)
      copy:
        src: "{{ hostvars.localhost.ssh_private_key_file }}"
        dest: /root/.ssh/id_rsa
        owner: root
        group: root
        mode: '0400'

    - name: Copy SSH keys (Authorized)
      copy:
        src: "{{ hostvars.localhost.ssh_private_key_file }}.pub"
        dest: /root/.ssh/authorized_keys
        owner: root
        group: root
        mode: '0644'
